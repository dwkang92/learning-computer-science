21.08.10 (Tue)

1. 운영체제의 구조

 - Kernal (커널)
    * OS의 핵심부분 (메모리 상주)
    시스템관리(Processor, memory, etc.) 등, 가장 빈번하게 사용되는 기능들을 담당한다.
    동의어로는　핵, 관리자 프로그램, 상주 프로그램, 제어 프로그램이 있다.


 - Utility (유틸리티)
    * 비상주 프로그램
    * UI 등, 서비스 프로그램


 - 단일 구조 운영체제
    * Kernal의 여러 기능을 하나의 커다란 통에 모아둔 것
    * 장점: 커널 내 모듈간 직접 통신
    * 단점: 커널의 巨大化로 인해 오류 및 버그, 추가 기능 구현 등의 유지보수가 어렵다.
           또한, 동일 메모리에 모든 기능이 있어, 한 모듈의 문제가 전체 시스템에 영향을 준다.
           하나의 통에 다 모여 있는데 거기에 문제 (악성코드와 버그)가 생기면 어떻게 될까?

 - 계층 구조 운영체제
    * 장점: 모듈화가 되어 계층간 검증 및 수정 용의. 그리고 설계와 구현이 단순해진다.
    * 단점: 단일구조 대비 성능이 저하된다. 왜냐하면 원하는 기능을 수행하는데 있어 여러 계층을 거쳐야 하므로.


 - 마이크로 커널 구조
    * 커널에는 정말 필수적인 내용만 담고, 나머진 사용자 영역에 넘겨버리자는 개념.


2. 운영체제의 기능
 
 - 관리. 관리. 관리. (프로세스, 프로세서(CPU), 메모리, 파일, 입출력, 보조기억장치 및 기타 주변장치 관리)
 
 - 프로세스:
    * 커널에 등록된 실행 단위 (실행중인 프로그램)
    * 사용자 요청 / 프로그램의 수행 주체 (entity)

    - OS의 프로세스 관리 기능
    * 생성 / 삭제, 상태관리
    * 자원 할당
    * 프로세스 간 통신 및 동기화 (Synchronization)
    * 교착상태 해결

    - 프로세스 정보 관리
    * PCB (Process Control Bloc)

 - Processor Management
    * 중앙 처리 장치 (CPU)
    프로그램을 실행하는 핵심 자원

    * 프로세스 스케쥴링
    세스템 내의 프로세스 처리 순서 결정

    * 프로세서 할당 관리
    프로세스들에 대한 프로세서 할당. 한번에 하나의 프로세스만 사용가능함.

 - Memory Management
    * 주 기억장치
    작업을 위한 프로그램 및 데이터를 올려놓는 공간

    * Multi-user, Mulit-tasking System
    프로세스에 대한 메모리 할당 및 회수, 메모리 여유공간 관리, 각 프로세스의 할당 메모리 영역 접근 보호

    * 메모리 할당 방법
    전체 적재: 구현이 간단하지만 제한적인 공간이 단점.
    일부 적재: 프로그램 및 데이터의 일부만 적재한다는 뜻. 메모리를 효율적으로 활용 할 수 있지만, 보조기억 장치 접근이 필요하다.


 - File Management
 - I/O Management (입출력 관리)


 종완님 보이시나요?