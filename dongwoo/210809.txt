2021/08/09 (mon)

1. 운영체제의 역할
  - User Interface (편리성) 우리가 보고있는 화면
   * CUI (Character User Interface) 예전에 초기 컴퓨터화면
   * GUI (Graphical User Interface) 현재 우리가 보는 컴퓨터화면
   * EUCI (End-User Comfortable Interface) 시스템을 사용하는 사용자가 편하게 시스템을 사용할 수 있도록 특화된 UI
  
  - Resource management (효율성)
   * HW resource (processor, memory, I/O devices, etc.)
   * SW resource (file, application, message, signal, etc.)

  - Process and Thread management (실행하는 주체)

  - System Management (시스템 보호와 관리)

2. 컴퓨터 시스템의 구성

컴퓨터 하드웨어가 가장 아래. 그 위에 OS (Kernal, System Call Interface), 그 위에사용자들이 사용하는 프로그램이나 어플리케이션이 존재한다.

2-1. Kernal과 System Call Interface란?

하드웨어를 관리하면서 사용자에게 서비스 제공.

  * Kernal: 운영체제를 모아둔 곳. 사용자가 Kernal에 마음대로 접속하게되면 Kernal이 HW를 관리하는데에 어려움이 생김.
  * System Call Interface: 
    Kernal에서 제공하는 서비스 중에서, 사용자가 사용할수 있는 기능을 모아둔 곳.
    어플리케이션이나 프로그램, 사용자가 OS (Kernal)에 연락하기 위한 통로이다. 함수형태로 주로 요청되어짐.


3. 운영체제의 구분

 - 동시 사용자 수
  * Single-user system (단일 사용자)
    한명의 사용자가 모든 시스템 자원을 독점한다.
    자원관리 및 시스템 보호 방식이 간단하다.
    개인용 장비 (PC, Mobile)에 사용되어진다.
    i.e. Windows 7/10, Android, etc.

  * Multi-user system (다중 사용자)
    동시에 여러 사용자들이 시스템을 사용한다.
    각종 시스템자원(파일 등)들에 대한 소유 권한 관리가 필요하다.
    기본적으로 멀티태스킹 기능이 필요하며, OS의 기능 및 구조가 복잡하다.
    서버, 클러스터장비에 사용되어진다.
    i.e. Unix, Linux, Windows Server, etc.


 - 동시 실행 프로세스 수
  * Single-tasking system (단일 작업)
    시스템 내에 하나의 작업 (프로세스)만 존재한다. 하나의 프로그램 실행을 마친 뒤, 다른 프로그램을 실행한다는 의미.
    운영체제의 구조가 간단하다.
    i.e. MS-DOS, terminal

  * Multi-tasking system (다중 작업)
    동시에 여러작업 (프로세스)의 수행이 가능하다. 작업들 사이의 동시 수행, 동기화 등을 관리해야 한다.
    운영체제의 기능 및 구조가 복잡하다.
    i.e. Unix / Linux, Windows, etc.